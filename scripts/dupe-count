#!/usr/bin/env python3

import pandas as pd

import docopt

from delphin import itsdb, tokens

USAGE = '''
Usage: dupe-count  (-w SPEC | -y SPEC) [-W SPEC | -Y SPEC]
                   [--on=KEY] [-d|-D] PROFILES...

Count duplicate sentences in corpora. If -W|-Y is given, also check
the target sentence and the source/target pairs. If -- appears in the
list of PROFILES, those before -- are taken as reference items for
duplicate checks; e.g., 'test -- train dev' will find the items in
train and dev that duplicate those in test.

Arguments:
  REFPROFILES               profiles to use as reference for checks
  PROFILES                  profiles to check for duplicates

Options:
  -h, --help                display this help and exit
  -w SPEC                   check sentence at SPEC
  -y SPEC                   check yy-encoded sentence at SPEC
  -W SPEC                   check target sentence at SPEC
  -Y SPEC                   check target yy-encoded sentence at SPEC
  --on key                  field key to pair sentences on [default: i-id]
  -d                        print ids of duplicates
  -D                        print ids and sentences of duplicates
'''

def main():
    args = docopt.docopt(USAGE)

    src_spec = tgt_spec = None
    if args['-w']:
        src_spec = args['-w']
        get_src = get_sentence
    elif args['-y']:
        src_spec = args['-y']
        get_src = get_yy
    if args['-W']:
        tgt_spec = args['-W']
        get_tgt = get_sentence
    elif args['-Y']:
        tgt_spec = args['-Y']
        get_tgt = get_yy
    key = args['--on']

    for spec in (src_spec, tgt_spec):
        if not spec:
            continue
        table, cols = itsdb.get_data_specifier(spec)
        if table is None:
            raise ValueError(
                'Table must be specified: {}'.format(spec)
            )
        if len(cols) != 1:
            raise ValueError(
                'Exactly one column must be specified: {}'.format(spec)
            )

    if '--' in args['PROFILES']:
        i = args['PROFILES'].index('--')
        src_ref = get_data(args['PROFILES'][:i], key, src_spec, get_src)
        src_ref.drop_duplicates('norm', inplace=True)
        src = get_data(args['PROFILES'][i+1:], key, src_spec, get_src)
        if tgt_spec:
            tgt_ref = get_data(args['PROFILES'][:i], key, tgt_spec, get_tgt)
            tgt_ref.drop_duplicates('norm', inplace=True)
            tgt = get_data(args['PROFILES'][i+1:], key, tgt_spec, get_tgt)
    else:
        src_ref = tgt_ref = None
        src = get_data(args['PROFILES'], key, src_spec, get_src)
        if tgt_spec:
            tgt = get_data(args['PROFILES'], key, tgt_spec, get_tgt)

    g = find_duplicates(src, src_ref)
    print_summary(g, 'Source')
    if args['-d'] or args['-D']:
        print_duplicates(g, args['-D'])

    if tgt_spec:
        g = find_duplicates(tgt, tgt_ref)
        print_summary(g, 'Target')
        if args['-d'] or args['-D']:
            print_duplicates(g, args['-D'])

        pair = pd.merge(
            src, tgt,
            how='inner',
            on=('profile', 'id'),
            suffixes=('_src','_tgt')
        )
        pair_ref = None
        if src_ref is not None:
            pair_ref = pd.merge(
                src_ref, tgt_ref,
                how='inner',
                on=('profile', 'id'),
                suffixes=('_src', '_tgt')
            )
        g = find_duplicates(pair, pair_ref, subset=('norm_src', 'norm_tgt'))
        print_summary(g, 'Paired')
        if args['-d'] or args['-D']:
            print_duplicates(g, 'pair' if args['-D'] else False)



def get_data(profs, key, spec, get):
    return pd.DataFrame(
        _get_data(profs, key, spec, get),
        columns=('profile', 'id', 'norm', 'orig')
    )

def _get_data(profs, key, spec, get):
    table, cols = itsdb.get_data_specifier(spec)
    for prof in profs:
        p = itsdb.ItsdbProfile(prof)
        for s, _id in p.select(table, cols + [key]):
            s = get(s)
            yield(prof, _id, s.lower(), s)

# thanks: https://stackoverflow.com/a/46629549/1441112
def find_duplicates(df, ref, subset=('norm',)):
    if ref is not None:
        return (
            df.merge(ref, how='inner', on=subset, suffixes=('','_y'))
            .groupby(subset[0])
        )
    else:
        return df[df.duplicated(subset, keep=False)].groupby(subset[0])


def print_summary(g, subset):
    itemcount = g.size().sum()
    print(
        '{} has {} duplicated item(s) ({} original(s), {} repeated)'
        .format(subset, itemcount, len(g), itemcount-len(g))
    )

def print_duplicates(g, show=False):
    fmt = '{0.profile}\t{0.id}'
    if show == 'pair':
        fmt += '\t{0.orig_src}\t{0.orig_tgt}'
    elif show:
        fmt += '\t{0.orig}'
    for _, group in g:
        print('\n'.join(map(fmt.format, group.itertuples())))
    print()

def get_sentence(s):
    return ' '.join(s.split())

def get_yy(s):
    return ' '.join(
        tok.form
        for tok in tokens.YyTokenLattice.from_string(s).tokens
    )

if __name__ == '__main__':
    main()
