#!/usr/bin/env python3

from collections import Counter
import statistics

import docopt

from delphin import itsdb, tokens

USAGE = '''
Usage: word-count [-l SPEC|-w SPEC|-y SPEC] [--type] [--histogram] PROFILES...

Count the words in a corpus. If none of -l, -w, or -y are given, the
default is as if -l item:i-length was provided. If -w or -y are given,
vocabulary size is also calculated.

Arguments:
  PROFILES                  profiles to analyze

Options:
  -h, --help                display this help and exit
  -l SPEC                   get length field at SPEC
  -w SPEC                   count tokens at SPEC
  -y SPEC                   count yy tokens at SPEC
  --histogram               line counts per word-count
'''


def main():
    args = docopt.docopt(USAGE)

    toks = lambda i: ['a'] * int(i)  # for compatibility with other methods
    if args['-l']:
        spec = args['-l']
    elif args['-w']:
        spec = args['-w']
        toks = lambda s: s.split()
    elif args['-y']:
        spec = args['-y']
        toks = lambda s: len(tokens.YyTokenLattice.from_string(s).tokens)
    else:
        spec = 'item:i-length'

    table, cols = itsdb.get_data_specifier(spec)
    if table is None:
        raise ValueError(
            'Table must be specified: {}'.format(spec)
        )
    if len(cols) != 1:
        raise ValueError(
            'Exactly one column must be specified: {}'.format(spec)
        )


    vocab = Counter()
    counts = []
    for prof in args['PROFILES']:
        p = itsdb.ItsdbProfile(prof)
        for row in p.select(table, cols):
            ts = toks(row[0])
            vocab.update(ts)
            counts.append(len(ts))

    print(
        'Lines:         {:>12d}\n'
        'Words (total): {:>12d}\n'
        'Words (min):   {:>12d}\n'
        'Words (max):   {:>12d}\n'
        'Words (avg):   {:>15.2f}\n'
        'Words (stdev): {:>15.2f}'
        .format(
            len(counts),
            sum(counts),
            min(counts),
            max(counts),
            statistics.mean(counts),
            statistics.stdev(counts)
        )
    )
    if args['-w'] or args['-y']:
        print('Vocab size:    {:>12d}\n'.format(len(vocab)))

    if args['--histogram']:
        c = Counter(counts)
        print('wc\tlc\tpercent')
        for wc in range(min(counts), max(counts)+1):
            print('{}\t{}\t{}'.format(wc, c[wc], float(c[wc])/len(counts)))


if __name__ == '__main__':
    main()
