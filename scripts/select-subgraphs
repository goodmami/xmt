#!/usr/bin/env python3

import re

import docopt

import pandas as pd

from util import read_subgraph_file, penman_structure as pstruct

USAGE = '''
Usage: select-subgraphs [-c C] [-s P] [-t P] [--isomorphic] [--order=N]
                        [--no-unknown-sources] [--no-unknown-targets]
                        [--predicates=FILE] [--sort] SGFILE

The filtering options -c C, -s P, and -t P, if given a numerical argument
(e.g., -c5 or -s0.75) filter each pair directly based on these values.
If the number is an integer prefixed by a colon (e.g., -c:5, -s:3), then
the top N within the group sharing the same source subgraph will be kept.
With --order, N, :N, and N: mean exactly-N, N-or-lower, and N-or-greater

Arguments:
  SGFILE                    file containing aligned MRS subgraphs

General Options:
  -h, --help                display this help and exit
  -c C                      filter on the count
  -s P                      filter on the source translation probability
  -t P                      filter on the target translation probability
  --isomorphic              keep when source and target are isomorphic
  --order N                 keep when both source and target have order < N
  --no-unknown-sources      remove when the source has an unknown predicate
  --no-unknown-targets      remove when the target has an unknown predicate
  --predicates FILE         remove when source predicates don't exist in FILE
  --sort                    sort subgraphs by size
'''

cols=('count', 'sprob', 'tprob', 'sord', 'tord', 'meta', 'src', 'tgt')

def main():
    args = docopt.docopt(USAGE)

    df = pd.DataFrame(_read(open(args['SGFILE'])), columns=cols)

    # these are easier; do them first
    if args['--order'] is not None:
        if args['--order'].startswith(':'):
            n = int(args['--order'][1:])
            df = df[(df['sord'] <= n) & (df['tord'] <= n)]
        elif args['--order'].endswith(':'):
            n = int(args['--order'][:-1])
            df = df[(df['sord'] >= n) & (df['tord'] >= n)]
        else:
            n = int(args['--order'])
            df = df[(df['sord'] == n) & (df['tord'] == n)]

    if args['--predicates']:
        predset = set(line.strip() for line in open(args['--predicates']))
        df = df[df['src'].apply(make_predcheck(predset))]

    if args['--no-unknown-sources']:
        df = df[~df['src'].str.contains(r'_unk(?:[ )]|nown)')]

    if args['--no-unknown-targets']:
        df = df[~df['tgt'].str.contains(r'_unk(?:[ )]|nown)')]

    if args['--isomorphic']:
        df = df[df['src'].apply(pstruct) == df['tgt'].apply(pstruct)]

    if args['-c']:
        if args['-c'].startswith(':'):
            n = int(args['-c'][1:])
            df = df.sort_values('count').groupby('src').tail(n)
        else:
            n = int(args['-c'])
            df = df[df['count'] >= n]

    if args['-s']:
        if args['-s'].startswith(':'):
            n = int(args['-s'][1:])
            df = df.sort_values('sprob').groupby('src').tail(n)
        else:
            n = float(args['-s'])
            df = df[df['sprob'] >= n]

    if args['-t']:
        if args['-t'].startswith(':'):
            n = int(args['-t'][1:])
            df = df.sort_values('tprob').groupby('src').tail(n)
        else:
            n = float(args['-t'])
            df = df[df['tprob'] >= n]

    if args['--sort']:
        df.sort_values('sord', ascending=False, inplace=True)

    for i, s in df[['meta','src','tgt']].iterrows():
        meta, src, tgt = s
        print(meta)
        print(src)
        print(tgt)
        print()

def _read(f):
    for meta, s in read_subgraph_file(f):
        md = dict(meta)
        src, tgt = s.splitlines()
        count = int(md.get('count', 1))
        sprob = float(md.get('src-tprob', 1.0))
        tprob = float(md.get('src-tprob', 1.0))
        sord = src.count('(')
        tord = tgt.count('(')
        m = ' '.join(
            ['#'] + 
            ['::{}'.format(k) if v is None else '::{} {}'.format(k, v)
             for k, v in meta]
        )
        yield count, sprob, tprob, sord, tord, m, src, tgt


def make_predcheck(predset):
    def _predcheck(s):
        for m in re.finditer(r'/ (?P<p>[^ )]+)(?: :carg (?P<c>"[^"]+"))', s):
            if m.group('c'):
                if '{}({})'.format(m.group('p'), m.group('c')) not in predset:
                    return False
            else:
                if m.group('p') not in predset:
                    return False
        return True
    return _predcheck

if __name__ == '__main__':
    main()

