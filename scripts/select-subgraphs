#!/usr/bin/env python3

import docopt

import pandas as pd

from util import read_subgraph_file

USAGE = '''
Usage: select-subgraphs [-c C] [-s P] [-t P] SGFILE

The filtering options -c C, -s P, and -t P, if given a numerical argument
(e.g., -c5 or -s0.75) filter each pair directly based on these values.
If the number is an integer prefixed by a colon (e.g., -c:5, -s:3), then
the top N within the group sharing the same source subgraph will be kept.

Arguments:
  SGFILE                    file containing aligned MRS subgraphs

General Options:
  -h, --help                display this help and exit
  -c C                      filter on the count
  -s P                      filter on the source translation probability
  -t P                      filter on the target translation probability
'''

cols=('count', 'sprob', 'tprob', 'meta', 'src', 'tgt')

def main():
    args = docopt.docopt(USAGE)

    df = pd.DataFrame(_read(open(args['SGFILE'])), columns=cols)

    if args['-c']:
        if args['-c'].startswith(':'):
            n = int(args['-c'][1:])
            df = df.sort_values('count').groupby('src').tail(n)
        else:
            n = int(args['-c'])
            df = df[df['count'] >= n]

    if args['-s']:
        if args['-s'].startswith(':'):
            n = int(args['-s'][1:])
            df = df.sort_values('sprob').groupby('src').tail(n)
        else:
            n = float(args['-s'])
            df = df[df['sprob'] >= n]

    if args['-t']:
        if args['-t'].startswith(':'):
            n = int(args['-t'][1:])
            df = df.sort_values('tprob').groupby('src').tail(n)
        else:
            n = float(args['-t'])
            df = df[df['tprob'] >= n]

    for i, s in df[['meta','src','tgt']].iterrows():
        meta, src, tgt = s
        print(meta)
        print(src)
        print(tgt)
        print()

def _read(f):
    for meta, s in read_subgraph_file(f):
        md = dict(meta)
        src, tgt = s.splitlines()
        count = int(md.get('count', 1))
        sprob = float(md.get('src-tprob', 1.0))
        tprob = float(md.get('src-tprob', 1.0))
        m = ' '.join(
            ['#'] + 
            ['::{}'.format(k) if v is None else '::{} {}'.format(k, v)
             for k, v in meta]
        )
        yield count, sprob, tprob, m, src, tgt


if __name__ == '__main__':
    main()

