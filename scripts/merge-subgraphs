#!/usr/bin/env python3

import re

import docopt

from delphin.mrs.xmrs import Dmrs
from delphin.mrs.components import Pred, var_sort, var_id
from delphin.mrs.penman import XMRSCodec

from util import read_subgraph_file

USAGE = '''
Usage: merge-subgraphs [--calc-probs] SGFILE...

Arguments:
  SGFILE                    file containing aligned MRS subgraphs

Options:
  -h, --help                display this help and exit
  --calc-probs              find forward/backward probabilites from counts
'''

codec = XMRSCodec()


def main():
    args = docopt.docopt(USAGE)

    dc = {}  # pair count
    sc = {}  # source side count
    tc = {}  # target side count
    for f in args['SGFILE']:
        for meta, s in read_subgraph_file(open(f)):
            count = int(dict(meta).get('count', 1))
            dc[s] = dc.get(s, 0) + count
            a, b = s.splitlines()
            sc[a] = sc.get(a, 0) + count
            tc[b] = tc.get(b, 0) + count

    seen = set()
    for f in args['SGFILE']:
        for meta, s in read_subgraph_file(open(f)):
            if s in seen:
                continue
            seen.add(s)
            meta = dict(meta)
            meta['count'] = str(dc[s])
            if args['--calc-probs']:
                a, b = s.splitlines()
                meta['src-tprob'] = '{:.6f}'.format(float(dc[s])/sc[a])
                meta['tgt-tprob'] = '{:.6f}'.format(float(dc[s])/tc[b])
            newmeta = ['::id ' + meta['id'], '::count ' + str(meta['count'])]
            del meta['id']
            del meta['count']
            newmeta.extend(
                '::{} {}'.format(k, meta[k]) for k in sorted(meta)
            )
            print(' '.join(['#'] + newmeta))
            print(s)
            print()

if __name__ == '__main__':
    main()

