#!/usr/bin/env python3

import sys
import re

import docopt

from delphin.mrs.xmrs import Dmrs
from delphin.mrs.components import Pred, var_sort, var_id
from delphin.mrs.penman import XMRSCodec
from penman import DecodeError

from util import read_subgraph_file, penman_structure as pstruct

USAGE = '''
Usage: make-transer-rules ALIGNMENTS

Arguments:
  ALIGNMENTS                file containing aligned MRS subgraphs

Options:
  -h, --help                display this help and exit
'''

codec = XMRSCodec(indent=None)

def main():
    args = docopt.docopt(USAGE)

    for meta, inp, out in read_alignments(args['ALIGNMENTS']):
        print(make_transfer_rule(inp, out, meta))
        print()  # blank line between entries


def read_alignments(path):
    for meta, s in read_subgraph_file(open(path)):
        try:
            sgs = list(codec.iterdecode(s))
        except DecodeError:
            sgs = []
        if len(sgs) != 2:
            print(' '.join('{}={}'.format(k, v) for k, v in meta),
                  file=sys.stderr)
            print(s, file=sys.stderr)
            print('Invalid subgraph pair; skipping.\n', file=sys.stderr)
            continue
        inp, out = sgs
        yield meta, inp, out


def make_transfer_rule(inp, out, meta):
    x1 = rebuild_xmrs(inp)
    x2 = rebuild_xmrs(out)
    # first attempt to map variables in isomorphic graphs
    x1map, x2map = iso_map_variables(x1, x2, inp, out)
    # if that fails, do it by nodeid
    if len(set(x1map.values()).intersection(x2map.values())) == 0:
        x1map, x2map = nid_map_variables(x1, x2)

    distinguish_remaining_variables(x1, x2, x1map, x2map)

    lines = []
    lines.append(
        '; ' + ' '.join('{}={}'.format(k, v) for k, v in (meta or []))
    )
    lines.append(make_identifier(x1, x2) + ' := monotonic_omtr &')
    
    rels, hcons = make_definition(x1, x1map, prefix='ja:')
    lines.append('[ INPUT.RELS < {} >,'.format(rels))
    if hcons:
        lines.append('  INPUT.HCONS < {} >,'.format(hcons))

    rels, hcons = make_definition(x2, x2map)
    lines.append('  OUTPUT.RELS < {} >'.format(rels))#.replace('[ PRED', '+copy+ & [ PRED')))
    if hcons:
        lines[-1] += ','
        lines.append('  OUTPUT.HCONS < {} > ].'.format(hcons))
    else:
        lines[-1] += ' ].'

    return '\n'.join(lines)


def rebuild_xmrs(g):
    triples = []
    for t in g.triples():
        triples.append(t)
        if t.relation == 'predicate':
            v = t.source
            triples.append((t.source, 'cvarsort', var_sort(t.source)))
    return Dmrs.from_triples(triples, remap_nodeids=False)

def iso_map_variables(x1, x2, g1, g2):
    x1map, x2map = {}, {}
    if pstruct(codec.encode(g1)) == pstruct(codec.encode(g2)):
        for nid1, nid2 in zip(_iso_ids(g1), _iso_ids(g2)):
            ep1 = x1.ep(nid1)
            ep2 = x2.ep(nid2)
            x1map[ep1.iv] = x2map[ep2.iv] = ep1.iv
            x1map[ep1.label] = x2map[ep2.label] = ep1.label

    return x1map, x2map

def _iso_ids(g):
    return [t.source for t in g.attributes(relation='predicate')]

def nid_map_variables(x1, x2):
    x1nids = x1.nodeids()
    x2nids = x2.nodeids()
    i = max(var_id(v) for v in (x1.variables() + x2.variables())) + 1
    x1map, x2map = {}, {}
    for nid in set(x1nids).intersection(x2nids):
        x1ep = x1.ep(nid)
        x2ep = x2.ep(nid)
        v = var_sort(x1ep.iv) + str(i)
        i += 1
        x1map[x1ep.iv] = v
        x2map[x2ep.iv] = v
        v = x1map.get(x1ep.label, x2map.get(x2ep.label, None))
        if v is None:
            v = 'h' + str(i)
            i += 1
        x1map[x1ep.label] = v
        x2map[x2ep.label] = v

    return x1map, x2map

def distinguish_remaining_variables(x1, x2, x1map, x2map):
    allvars = set(x1map.values()).union(x2map.values())
    allvars.add('h0')  # in case it's empty
    i = max(var_id(v) for v in allvars) + 1
    for var in x1.variables():
        if var not in x1map:
            x1map[var] = var_sort(var) + str(i)
            i += 1
    for var in x2.variables():
        if var not in x2map:
            x2map[var] = var_sort(var) + str(i)
            i += 1

def make_identifier(x1, x2):
    def get_id(ep):
        s = ep.carg if ep.carg is not None else ep.pred.short_form()
        s = re.sub(r'[()\[\]<>:.]', r'', s)
        return s
    x1_preds = list(map(get_id, x1.eps()))
    x2_preds = list(map(get_id, x2.eps()))
    return '{}--{}--omtr'.format('+'.join(x1_preds), '+'.join(x2_preds))

def make_definition(x, vmap, prefix=''):
    # make indices to filter unlinked entities
    targets = set(tgt for nid in x.nodeids()
                      for role, tgt in x.outgoing_args(nid).items())
    qeqs = dict((hc.hi, hc.lo) for hc in x.hcons() if hc.hi in targets)
    targets.update(qeqs.values())
    targets.update(vmap.keys())

    # build more minimal EPs and HCONS
    rels = []
    hcons = []
    for ep in x.eps():
        iv = ep.iv
        label = ep.label
        attrs = []
        if label in targets:
            attrs.append('LBL #' + vmap.get(label, label))
        if iv in targets:
            attrs.append('ARG0 #' + vmap.get(iv, iv))
        for role, tgt in x.outgoing_args(ep.nodeid).items():
            attrs.append('{} #{}'.format(role, vmap.get(tgt, tgt)))
            if tgt in qeqs:
                lo = qeqs[tgt]
                hcons.append('qeq & [ HARG #{}, LARG #{} ]'.format(tgt, vmap.get(lo, lo)))
        if ep.carg is not None:
            attrs.append('CARG "{}"'.format(ep.carg))

        attrs = ', '.join([''] + attrs) if attrs else ''

        pred = '"{}_rel"'.format(prefix + ep.pred.string.strip('"'))
        rels.append('[ PRED {}{} ]'.format(pred, attrs))

    return ' ,\n               '.join(rels), ', '.join(hcons)

#
# TODO:
#  - properties on newly introduced preds (e.g. 1 to 2 mappings) (later)
#  - +copy+ only on individually aligned preds; list those first

if __name__ == '__main__':
    main()
