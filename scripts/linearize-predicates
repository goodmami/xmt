#!/usr/bin/env python3

USAGE = '''
Usage: linearize-predicates [--parameters=PATH] [--sort=METHOD]
                            [--annotate=MODE]
                            [--source-result-id=N] [--target-result-id=N]
                            PROFILE1 [PROFILE2]

Arguments:
  PROFILE1              the source profile
  PROFILE2              if given, the target profile

Options:
  -h, --help            display this help and exit
  --parameters PATH     JSON file of parameters (currently only the
                        'drop_nodes' key is used)
  --annotate MODE       predicate annotations; values of MODE are:
                        hb: Haugereid & Bond (verb@1x, nmz_verb, nmd_"Kim")
                        xmt: XMT style (pron(3.sg.m), card("1"), etc.)
                        short: short form of predicates only
                        none: full pred strings only [default: none]
  --source-result-id N  use the Nth source result [default: 0]
  --target-result-id N  use the Nth target result [default: 0]
  --sort METHOD         sort predicates by METHOD (see Sorting below);
                        no sorting is performed by default

Sorting:
  * --sort=surface      sort by the predicate surface order
  * --sort=semhead      sort strictly by the semantic head
  * --sort=topology     sort topologically (non-strict semhead)
'''

import json

import docopt

from delphin import itsdb
from delphin.mrs import simplemrs, xmrs

from util import rows, aligned_rows, predlist

TOPNID = 0


def main():
    args = docopt.docopt(USAGE)

    dropset = set()
    if args['--parameters']:
        params = json.load(open(args['--parameters'])).get('graphs', {})
        dropset.update(params.get('drop_nodes', []))
    ann_mode = args['--annotate']

    srid = args['--source-result-id']
    trid = args['--target-result-id']
    get_eps = {
        'surface': surface_sort,
        'semhead': semhead_sort,
        'topology': topology_sort,
    }.get(args['--sort'])

    p1 = itsdb.ItsdbProfile(args['PROFILE1'])
    if args['PROFILE2']:
        p2 = itsdb.ItsdbProfile(args['PROFILE2'])
        for i_id, mrs1, mrs2 in aligned_rows(p1, srid, p2, trid):
            x1 = simplemrs.loads_one(mrs1)
            x2 = simplemrs.loads_one(mrs2)
            print(
                '{}\t{}'.format(
                    ' '.join(predlist(x1, dropset, get_eps, ann_mode)),
                    ' '.join(predlist(x2, dropset, get_eps, ann_mode))
                )
            )
    else:
        for i_id, p_id, mrs in rows(p1):
            x = simplemrs.loads_one(mrs)
            print(' '.join(predlist(x, dropset, get_eps, ann_mode)))


def surface_sort(x):
    def key(ep):
        p = ep.pred.short_form()
        return (
            ep.cfrom,  # first by starting position
            -ep.cto,   # reversed by ending position
            -ep.is_quantifier(),  # quantifiers come first
            p.startswith('_'),    # then abstract, followed by surface preds
            p          # finally do alphabetic sort to resolve ties
        )
    return sorted(x.eps(), key=key)

def semhead_sort(x):
    raise NotImplementedError()
    d = xmrs.Dmrs.from_xmrs(x).to_dict()
    top = next((l['to'] for l in d['links'] if l['from'] == TOPNID), None)


def topology_sort(x):
    raise NotImplementedError()

if __name__ == '__main__':
    main()
